diff --git a/term.go b/term.go
index f9d8988..92a81aa 100644
--- a/term.go
+++ b/term.go
@@ -2,8 +2,21 @@ package term

 import "io"

+type termios struct {
+	Iflag  uint32
+	Oflag  uint32
+	Cflag  uint32
+	Lflag  uint32
+	Line   uint8
+	Cc     [19]uint8
+	Ispeed uint32
+	Ospeed uint32
+}
+
 // State holds the platform-specific state / console mode for the terminal.
-type State terminalState
+type State struct {
+	termios termios
+}

 // Winsize represents the size of the terminal window.
 type Winsize struct {
@@ -21,45 +34,49 @@ type Winsize struct {
 // supported, or falls back to terminal emulation. On Unix, this returns
 // the standard [os.Stdin], [os.Stdout] and [os.Stderr].
 func StdStreams() (stdIn io.ReadCloser, stdOut, stdErr io.Writer) {
-	return stdStreams()
+	return nil, nil, nil
 }

 // GetFdInfo returns the file descriptor for an os.File and indicates whether the file represents a terminal.
 func GetFdInfo(in interface{}) (fd uintptr, isTerminal bool) {
-	return getFdInfo(in)
+	return 0, false
 }

 // GetWinsize returns the window size based on the specified file descriptor.
 func GetWinsize(fd uintptr) (*Winsize, error) {
-	return getWinsize(fd)
+	return nil, nil
 }

 // SetWinsize tries to set the specified window size for the specified file
 // descriptor. It is only implemented on Unix, and returns an error on Windows.
 func SetWinsize(fd uintptr, ws *Winsize) error {
-	return setWinsize(fd, ws)
+	return nil
 }

 // IsTerminal returns true if the given file descriptor is a terminal.
 func IsTerminal(fd uintptr) bool {
-	return isTerminal(fd)
+	return false
+}
+
+func isTerminal(fd uintptr) bool {
+	return false
 }

 // RestoreTerminal restores the terminal connected to the given file descriptor
 // to a previous state.
 func RestoreTerminal(fd uintptr, state *State) error {
-	return restoreTerminal(fd, state)
+	return nil
 }

 // SaveState saves the state of the terminal connected to the given file descriptor.
 func SaveState(fd uintptr) (*State, error) {
-	return saveState(fd)
+	return nil, nil
 }

 // DisableEcho applies the specified state to the terminal connected to the file
 // descriptor, with echo disabled.
 func DisableEcho(fd uintptr, state *State) error {
-	return disableEcho(fd, state)
+	return nil
 }

 // SetRawTerminal puts the terminal connected to the given file descriptor into
@@ -67,19 +84,19 @@ func DisableEcho(fd uintptr, state *State) error {
 // [MakeRaw], and puts both the input and output into raw mode. On Windows, it
 // only puts the input into raw mode.
 func SetRawTerminal(fd uintptr) (previousState *State, err error) {
-	return setRawTerminal(fd)
+	return nil, nil
 }

 // SetRawTerminalOutput puts the output of terminal connected to the given file
 // descriptor into raw mode. On UNIX, this does nothing and returns nil for the
 // state. On Windows, it disables LF -> CRLF translation.
 func SetRawTerminalOutput(fd uintptr) (previousState *State, err error) {
-	return setRawTerminalOutput(fd)
+	return nil, nil
 }

 // MakeRaw puts the terminal (Windows Console) connected to the
 // given file descriptor into raw mode and returns the previous state of
 // the terminal so that it can be restored.
 func MakeRaw(fd uintptr) (previousState *State, err error) {
-	return makeRaw(fd)
+	return nil, nil
 }
diff --git a/term_unix.go b/term_unix.go
deleted file mode 100644
index 2ec7706..0000000
--- a/term_unix.go
+++ /dev/null
@@ -1,98 +0,0 @@
-//go:build !windows
-// +build !windows
-
-package term
-
-import (
-	"errors"
-	"io"
-	"os"
-
-	"golang.org/x/sys/unix"
-)
-
-// ErrInvalidState is returned if the state of the terminal is invalid.
-//
-// Deprecated: ErrInvalidState is no longer used.
-var ErrInvalidState = errors.New("Invalid terminal state")
-
-// terminalState holds the platform-specific state / console mode for the terminal.
-type terminalState struct {
-	termios unix.Termios
-}
-
-func stdStreams() (stdIn io.ReadCloser, stdOut, stdErr io.Writer) {
-	return os.Stdin, os.Stdout, os.Stderr
-}
-
-func getFdInfo(in interface{}) (uintptr, bool) {
-	var inFd uintptr
-	var isTerminalIn bool
-	if file, ok := in.(*os.File); ok {
-		inFd = file.Fd()
-		isTerminalIn = isTerminal(inFd)
-	}
-	return inFd, isTerminalIn
-}
-
-func getWinsize(fd uintptr) (*Winsize, error) {
-	uws, err := unix.IoctlGetWinsize(int(fd), unix.TIOCGWINSZ)
-	ws := &Winsize{Height: uws.Row, Width: uws.Col, x: uws.Xpixel, y: uws.Ypixel}
-	return ws, err
-}
-
-func setWinsize(fd uintptr, ws *Winsize) error {
-	return unix.IoctlSetWinsize(int(fd), unix.TIOCSWINSZ, &unix.Winsize{
-		Row:    ws.Height,
-		Col:    ws.Width,
-		Xpixel: ws.x,
-		Ypixel: ws.y,
-	})
-}
-
-func isTerminal(fd uintptr) bool {
-	_, err := tcget(fd)
-	return err == nil
-}
-
-func restoreTerminal(fd uintptr, state *State) error {
-	if state == nil {
-		return errors.New("invalid terminal state")
-	}
-	return tcset(fd, &state.termios)
-}
-
-func saveState(fd uintptr) (*State, error) {
-	termios, err := tcget(fd)
-	if err != nil {
-		return nil, err
-	}
-	return &State{termios: *termios}, nil
-}
-
-func disableEcho(fd uintptr, state *State) error {
-	newState := state.termios
-	newState.Lflag &^= unix.ECHO
-
-	return tcset(fd, &newState)
-}
-
-func setRawTerminal(fd uintptr) (*State, error) {
-	return makeRaw(fd)
-}
-
-func setRawTerminalOutput(fd uintptr) (*State, error) {
-	return nil, nil
-}
-
-func tcget(fd uintptr) (*unix.Termios, error) {
-	p, err := unix.IoctlGetTermios(int(fd), getTermios)
-	if err != nil {
-		return nil, err
-	}
-	return p, nil
-}
-
-func tcset(fd uintptr, p *unix.Termios) error {
-	return unix.IoctlSetTermios(int(fd), setTermios, p)
-}
diff --git a/term_windows.go b/term_windows.go
deleted file mode 100644
index 81ccff0..0000000
--- a/term_windows.go
+++ /dev/null
@@ -1,176 +0,0 @@
-package term
-
-import (
-	"fmt"
-	"io"
-	"os"
-	"os/signal"
-
-	windowsconsole "github.com/moby/term/windows"
-	"golang.org/x/sys/windows"
-)
-
-// terminalState holds the platform-specific state / console mode for the terminal.
-type terminalState struct {
-	mode uint32
-}
-
-// vtInputSupported is true if winterm.ENABLE_VIRTUAL_TERMINAL_INPUT is supported by the console
-var vtInputSupported bool
-
-func stdStreams() (stdIn io.ReadCloser, stdOut, stdErr io.Writer) {
-	// Turn on VT handling on all std handles, if possible. This might
-	// fail, in which case we will fall back to terminal emulation.
-	var (
-		emulateStdin, emulateStdout, emulateStderr bool
-
-		mode uint32
-	)
-
-	fd := windows.Handle(os.Stdin.Fd())
-	if err := windows.GetConsoleMode(fd, &mode); err == nil {
-		// Validate that winterm.ENABLE_VIRTUAL_TERMINAL_INPUT is supported, but do not set it.
-		if err = windows.SetConsoleMode(fd, mode|windows.ENABLE_VIRTUAL_TERMINAL_INPUT); err != nil {
-			emulateStdin = true
-		} else {
-			vtInputSupported = true
-		}
-		// Unconditionally set the console mode back even on failure because SetConsoleMode
-		// remembers invalid bits on input handles.
-		_ = windows.SetConsoleMode(fd, mode)
-	}
-
-	fd = windows.Handle(os.Stdout.Fd())
-	if err := windows.GetConsoleMode(fd, &mode); err == nil {
-		// Validate winterm.DISABLE_NEWLINE_AUTO_RETURN is supported, but do not set it.
-		if err = windows.SetConsoleMode(fd, mode|windows.ENABLE_VIRTUAL_TERMINAL_PROCESSING|windows.DISABLE_NEWLINE_AUTO_RETURN); err != nil {
-			emulateStdout = true
-		} else {
-			_ = windows.SetConsoleMode(fd, mode|windows.ENABLE_VIRTUAL_TERMINAL_PROCESSING)
-		}
-	}
-
-	fd = windows.Handle(os.Stderr.Fd())
-	if err := windows.GetConsoleMode(fd, &mode); err == nil {
-		// Validate winterm.DISABLE_NEWLINE_AUTO_RETURN is supported, but do not set it.
-		if err = windows.SetConsoleMode(fd, mode|windows.ENABLE_VIRTUAL_TERMINAL_PROCESSING|windows.DISABLE_NEWLINE_AUTO_RETURN); err != nil {
-			emulateStderr = true
-		} else {
-			_ = windows.SetConsoleMode(fd, mode|windows.ENABLE_VIRTUAL_TERMINAL_PROCESSING)
-		}
-	}
-
-	if emulateStdin {
-		h := uint32(windows.STD_INPUT_HANDLE)
-		stdIn = windowsconsole.NewAnsiReader(int(h))
-	} else {
-		stdIn = os.Stdin
-	}
-
-	if emulateStdout {
-		h := uint32(windows.STD_OUTPUT_HANDLE)
-		stdOut = windowsconsole.NewAnsiWriter(int(h))
-	} else {
-		stdOut = os.Stdout
-	}
-
-	if emulateStderr {
-		h := uint32(windows.STD_ERROR_HANDLE)
-		stdErr = windowsconsole.NewAnsiWriter(int(h))
-	} else {
-		stdErr = os.Stderr
-	}
-
-	return stdIn, stdOut, stdErr
-}
-
-func getFdInfo(in interface{}) (uintptr, bool) {
-	return windowsconsole.GetHandleInfo(in)
-}
-
-func getWinsize(fd uintptr) (*Winsize, error) {
-	var info windows.ConsoleScreenBufferInfo
-	if err := windows.GetConsoleScreenBufferInfo(windows.Handle(fd), &info); err != nil {
-		return nil, err
-	}
-
-	winsize := &Winsize{
-		Width:  uint16(info.Window.Right - info.Window.Left + 1),
-		Height: uint16(info.Window.Bottom - info.Window.Top + 1),
-	}
-
-	return winsize, nil
-}
-
-func setWinsize(fd uintptr, ws *Winsize) error {
-	return fmt.Errorf("not implemented on Windows")
-}
-
-func isTerminal(fd uintptr) bool {
-	var mode uint32
-	err := windows.GetConsoleMode(windows.Handle(fd), &mode)
-	return err == nil
-}
-
-func restoreTerminal(fd uintptr, state *State) error {
-	return windows.SetConsoleMode(windows.Handle(fd), state.mode)
-}
-
-func saveState(fd uintptr) (*State, error) {
-	var mode uint32
-
-	if err := windows.GetConsoleMode(windows.Handle(fd), &mode); err != nil {
-		return nil, err
-	}
-
-	return &State{mode: mode}, nil
-}
-
-func disableEcho(fd uintptr, state *State) error {
-	// See https://msdn.microsoft.com/en-us/library/windows/desktop/ms683462(v=vs.85).aspx
-	mode := state.mode
-	mode &^= windows.ENABLE_ECHO_INPUT
-	mode |= windows.ENABLE_PROCESSED_INPUT | windows.ENABLE_LINE_INPUT
-	err := windows.SetConsoleMode(windows.Handle(fd), mode)
-	if err != nil {
-		return err
-	}
-
-	// Register an interrupt handler to catch and restore prior state
-	restoreAtInterrupt(fd, state)
-	return nil
-}
-
-func setRawTerminal(fd uintptr) (*State, error) {
-	oldState, err := MakeRaw(fd)
-	if err != nil {
-		return nil, err
-	}
-
-	// Register an interrupt handler to catch and restore prior state
-	restoreAtInterrupt(fd, oldState)
-	return oldState, err
-}
-
-func setRawTerminalOutput(fd uintptr) (*State, error) {
-	oldState, err := saveState(fd)
-	if err != nil {
-		return nil, err
-	}
-
-	// Ignore failures, since winterm.DISABLE_NEWLINE_AUTO_RETURN might not be supported on this
-	// version of Windows.
-	_ = windows.SetConsoleMode(windows.Handle(fd), oldState.mode|windows.DISABLE_NEWLINE_AUTO_RETURN)
-	return oldState, err
-}
-
-func restoreAtInterrupt(fd uintptr, state *State) {
-	sigchan := make(chan os.Signal, 1)
-	signal.Notify(sigchan, os.Interrupt)
-
-	go func() {
-		_ = <-sigchan
-		_ = RestoreTerminal(fd, state)
-		os.Exit(0)
-	}()
-}
diff --git a/termios_bsd.go b/termios_bsd.go
deleted file mode 100644
index 45f77e0..0000000
--- a/termios_bsd.go
+++ /dev/null
@@ -1,13 +0,0 @@
-//go:build darwin || freebsd || openbsd || netbsd
-// +build darwin freebsd openbsd netbsd
-
-package term
-
-import (
-	"golang.org/x/sys/unix"
-)
-
-const (
-	getTermios = unix.TIOCGETA
-	setTermios = unix.TIOCSETA
-)
diff --git a/termios_nonbsd.go b/termios_nonbsd.go
deleted file mode 100644
index 88b7b21..0000000
--- a/termios_nonbsd.go
+++ /dev/null
@@ -1,13 +0,0 @@
-//go:build !darwin && !freebsd && !netbsd && !openbsd && !windows
-// +build !darwin,!freebsd,!netbsd,!openbsd,!windows
-
-package term
-
-import (
-	"golang.org/x/sys/unix"
-)
-
-const (
-	getTermios = unix.TCGETS
-	setTermios = unix.TCSETS
-)
diff --git a/termios_unix.go b/termios_unix.go
deleted file mode 100644
index 60c8237..0000000
--- a/termios_unix.go
+++ /dev/null
@@ -1,35 +0,0 @@
-//go:build !windows
-// +build !windows
-
-package term
-
-import (
-	"golang.org/x/sys/unix"
-)
-
-// Termios is the Unix API for terminal I/O.
-//
-// Deprecated: use [unix.Termios].
-type Termios = unix.Termios
-
-func makeRaw(fd uintptr) (*State, error) {
-	termios, err := tcget(fd)
-	if err != nil {
-		return nil, err
-	}
-
-	oldState := State{termios: *termios}
-
-	termios.Iflag &^= unix.IGNBRK | unix.BRKINT | unix.PARMRK | unix.ISTRIP | unix.INLCR | unix.IGNCR | unix.ICRNL | unix.IXON
-	termios.Oflag &^= unix.OPOST
-	termios.Lflag &^= unix.ECHO | unix.ECHONL | unix.ICANON | unix.ISIG | unix.IEXTEN
-	termios.Cflag &^= unix.CSIZE | unix.PARENB
-	termios.Cflag |= unix.CS8
-	termios.Cc[unix.VMIN] = 1
-	termios.Cc[unix.VTIME] = 0
-
-	if err := tcset(fd, termios); err != nil {
-		return nil, err
-	}
-	return &oldState, nil
-}
diff --git a/termios_windows.go b/termios_windows.go
deleted file mode 100644
index 5be4e76..0000000
--- a/termios_windows.go
+++ /dev/null
@@ -1,37 +0,0 @@
-package term
-
-import "golang.org/x/sys/windows"
-
-func makeRaw(fd uintptr) (*State, error) {
-	state, err := SaveState(fd)
-	if err != nil {
-		return nil, err
-	}
-
-	mode := state.mode
-
-	// See
-	// -- https://msdn.microsoft.com/en-us/library/windows/desktop/ms686033(v=vs.85).aspx
-	// -- https://msdn.microsoft.com/en-us/library/windows/desktop/ms683462(v=vs.85).aspx
-
-	// Disable these modes
-	mode &^= windows.ENABLE_ECHO_INPUT
-	mode &^= windows.ENABLE_LINE_INPUT
-	mode &^= windows.ENABLE_MOUSE_INPUT
-	mode &^= windows.ENABLE_WINDOW_INPUT
-	mode &^= windows.ENABLE_PROCESSED_INPUT
-
-	// Enable these modes
-	mode |= windows.ENABLE_EXTENDED_FLAGS
-	mode |= windows.ENABLE_INSERT_MODE
-	mode |= windows.ENABLE_QUICK_EDIT_MODE
-	if vtInputSupported {
-		mode |= windows.ENABLE_VIRTUAL_TERMINAL_INPUT
-	}
-
-	err = windows.SetConsoleMode(windows.Handle(fd), mode)
-	if err != nil {
-		return nil, err
-	}
-	return state, nil
-}
